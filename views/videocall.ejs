<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebRTC Meeting App</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            color: #fff;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }
        
        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #e94560, #00b4db);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: #a9b7c6;
            margin-bottom: 15px;
        }
        
        .meeting-info {
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .info-item {
            background: rgba(15, 52, 96, 0.6);
            padding: 10px 20px;
            border-radius: 50px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .meeting-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .video-container {
            flex: 2;
            min-width: 300px;
            background: rgba(22, 33, 62, 0.8);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }
        
        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .video-item {
            background: #0f3460;
            border-radius: 12px;
            overflow: hidden;
            position: relative;
            height: 220px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            transition: transform 0.3s ease;
        }
        
        .video-item:hover {
            transform: translateY(-5px);
        }
        
        .video-item video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .video-label {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.6);
            padding: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 25px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 14px 28px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1rem;
        }
        
        .btn-primary {
            background: linear-gradient(45deg, #e94560, #ff5c77);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(233, 69, 96, 0.4);
        }
        
        .btn-secondary {
            background: rgba(31, 64, 104, 0.8);
            color: white;
        }
        
        .btn-secondary:hover {
            background: rgba(42, 84, 157, 0.8);
            transform: translateY(-3px);
        }
        
        .btn-danger {
            background: linear-gradient(45deg, #ff416c, #ff4b2b);
            color: white;
        }
        
        .btn-danger:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(255, 65, 108, 0.4);
        }
        
        .chat-container {
            flex: 1;
            min-width: 300px;
            background: rgba(22, 33, 62, 0.8);
            border-radius: 15px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }
        
        .chat-header {
            font-size: 1.4rem;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            color: #e94560;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            max-height: 300px;
            margin-bottom: 15px;
            padding: 15px;
            background: rgba(15, 52, 96, 0.4);
            border-radius: 12px;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 12px 15px;
            border-radius: 12px;
            background: rgba(31, 64, 104, 0.6);
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .message-sender {
            font-weight: bold;
            color: #e94560;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .chat-input {
            display: flex;
            gap: 12px;
        }
        
        .chat-input input {
            flex: 1;
            padding: 14px;
            border-radius: 50px;
            border: none;
            background: rgba(15, 52, 96, 0.6);
            color: white;
            outline: none;
        }
        
        .chat-input input:focus {
            box-shadow: 0 0 0 2px rgba(233, 69, 96, 0.5);
        }
        
        .chat-input button {
            padding: 14px 20px;
            border-radius: 50px;
            border: none;
            background: linear-gradient(45deg, #e94560, #ff5c77);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .chat-input button:hover {
            transform: scale(1.05);
        }
        
        .participants {
            background: rgba(22, 33, 62, 0.8);
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }
        
        .participants-header {
            font-size: 1.4rem;
            margin-bottom: 15px;
            color: #e94560;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .participants-list {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .participant {
            background: rgba(15, 52, 96, 0.6);
            padding: 12px 20px;
            border-radius: 50px;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s ease;
        }
        
        .participant:hover {
            background: rgba(31, 64, 104, 0.8);
            transform: translateY(-2px);
        }
        
        .participant-you {
            background: linear-gradient(45deg, #e94560, #ff5c77);
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #4cc759;
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #a9b7c6;
            font-size: 0.9rem;
        }
        
        .meeting-id {
            user-select: all;
            cursor: pointer;
        }
        
        @media (max-width: 768px) {
            .meeting-container {
                flex-direction: column;
            }
            
            .video-grid {
                grid-template-columns: 1fr;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-video"></i> WebRTC Meeting</h1>
            <p class="subtitle">Secure peer-to-peer video conferencing</p>
            <div class="meeting-info">
                <div class="info-item">
                    <i class="fas fa-users"></i>
                    <span>2 Participants</span>
                </div>
                <div class="info-item">
                    <i class="fas fa-id-badge"></i>
                    <span>Meeting ID: <span class="meeting-id">874-329-516</span></span>
                </div>
                <div class="info-item">
                    <i class="fas fa-clock"></i>
                    <span>Duration: 18:42</span>
                </div>
            </div>
        </header>
        
        <div class="meeting-container">
            <div class="video-container">
                <div class="video-grid">
                    <div class="video-item">
                        <video id="local-video" autoplay muted></video>
                        <div class="video-label">
                            <i class="fas fa-user"></i>
                            <span>You (Sarah Johnson)</span>
                        </div>
                    </div>
                    <div class="video-item">
                        <video id="remote-video" autoplay></video>
                        <div class="video-label">
                            <i class="fas fa-user"></i>
                            <span>Alex Rodriguez</span>
                        </div>
                    </div>
                    <div class="video-item">
                        <video id="remote-video-2" autoplay></video>
                        <div class="video-label">
                            <i class="fas fa-user"></i>
                            <span>Maya Patel</span>
                        </div>
                    </div>
                    <div class="video-item">
                        <video id="remote-video-3" autoplay></video>
                        <div class="video-label">
                            <i class="fas fa-user"></i>
                            <span>David Kim</span>
                        </div>
                    </div>
                </div>
                
                <div class="controls">
                    <button class="btn btn-primary" id="join-btn">
                        <i class="fas fa-phone"></i> Join Meeting
                    </button>
                    <button class="btn btn-danger" id="leave-btn" disabled>
                        <i class="fas fa-phone-slash"></i> Leave Meeting
                    </button>
                    <button class="btn btn-secondary" id="video-toggle">
                        <i class="fas fa-video"></i> Video
                    </button>
                    <button class="btn btn-secondary" id="audio-toggle">
                        <i class="fas fa-microphone"></i> Audio
                    </button>
                    <button class="btn btn-secondary" id="screen-share">
                        <i class="fas fa-desktop"></i> Share Screen
                    </button>
                </div>
            </div>
            
            <div class="chat-container">
                <div class="chat-header">
                    <i class="fas fa-comments"></i> Chat
                </div>
                <div class="chat-messages" id="chat-messages">
                    <div class="message">
                        <div class="message-sender">
                            <i class="fas fa-shield-alt"></i> System
                        </div>
                        <div class="message-text">Welcome to the meeting! Send a message to start chatting.</div>
                    </div>
                    <div class="message">
                        <div class="message-sender">
                            <i class="fas fa-user"></i> Alex Rodriguez
                        </div>
                        <div class="message-text">Hi everyone! Can you hear me okay?</div>
                    </div>
                    <div class="message">
                        <div class="message-sender">
                            <i class="fas fa-user"></i> You
                        </div>
                        <div class="message-text">Yes, your audio is clear on my end.</div>
                    </div>
                </div>
                <div class="chat-input">
                    <input type="text" id="message-input" placeholder="Type your message...">
                    <button id="send-message">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <div class="participants">
            <div class="participants-header">
                <i class="fas fa-users"></i> Participants (4)
            </div>
            <div class="participants-list">
                <div class="participant participant-you">
                    <div class="status-indicator"></div>
                    <i class="fas fa-user"></i>
                    <span>You (Sarah Johnson)</span>
                </div>
                <div class="participant">
                    <div class="status-indicator"></div>
                    <i class="fas fa-user"></i>
                    <span>Alex Rodriguez</span>
                </div>
                <div class="participant">
                    <div class="status-indicator"></div>
                    <i class="fas fa-user"></i>
                    <span>Maya Patel</span>
                </div>
                <div class="participant">
                    <div class="status-indicator"></div>
                    <i class="fas fa-user"></i>
                    <span>David Kim</span>
                </div>
            </div>
        </div>
        
        <footer>
            <p>Powered by WebRTC Technology | Secure & Private | &copy; 2023 WebRTC Meeting App</p>
        </footer>
    </div>

    <script>
        // Simulated WebRTC functionality for demonstration
        document.addEventListener('DOMContentLoaded', function() {
            const joinBtn = document.getElementById('join-btn');
            const leaveBtn = document.getElementById('leave-btn');
            const videoToggle = document.getElementById('video-toggle');
            const audioToggle = document.getElementById('audio-toggle');
            const screenShareBtn = document.getElementById('screen-share');
            const localVideo = document.getElementById('local-video');
            const remoteVideo = document.getElementById('remote-video');
            const remoteVideo2 = document.getElementById('remote-video-2');
            const remoteVideo3 = document.getElementById('remote-video-3');
            const messageInput = document.getElementById('message-input');
            const sendMessageBtn = document.getElementById('send-message');
            const chatMessages = document.getElementById('chat-messages');
            
            // Simulate getting user media
            joinBtn.addEventListener('click', function() {
                // In a real implementation, this would get the actual user media
                simulateUserMedia();
                
                // Update UI
                joinBtn.disabled = true;
                leaveBtn.disabled = false;
                
                // Simulate receiving video after a delay
                setTimeout(() => {
                    simulateRemoteVideo(remoteVideo, 'Alex Rodriguez');
                    addMessage('System', 'Alex Rodriguez joined the meeting');
                }, 1000);
                
                setTimeout(() => {
                    simulateRemoteVideo(remoteVideo2, 'Maya Patel');
                    addMessage('System', 'Maya Patel joined the meeting');
                }, 2500);
                
                setTimeout(() => {
                    simulateRemoteVideo(remoteVideo3, 'David Kim');
                    addMessage('System', 'David Kim joined the meeting');
                }, 4000);
                
                // Add system message
                addMessage('System', 'You joined the meeting');
            });
            
            leaveBtn.addEventListener('click', function() {
                // Reset videos
                localVideo.srcObject = null;
                remoteVideo.srcObject = null;
                remoteVideo2.srcObject = null;
                remoteVideo3.srcObject = null;
                
                // Update UI
                joinBtn.disabled = false;
                leaveBtn.disabled = true;
                
                // Add system message
                addMessage('System', 'You left the meeting');
            });
            
            videoToggle.addEventListener('click', function() {
                // In a real implementation, this would toggle the video track
                const isVideoOn = localVideo.srcObject !== null;
                if (isVideoOn) {
                    localVideo.style.opacity = '0.5';
                    videoToggle.innerHTML = '<i class="fas fa-video-slash"></i> Video';
                    addMessage('System', 'You turned off your video');
                } else {
                    localVideo.style.opacity = '1';
                    videoToggle.innerHTML = '<i class="fas fa-video"></i> Video';
                    addMessage('System', 'You turned on your video');
                }
            });
            
            audioToggle.addEventListener('click', function() {
                // In a real implementation, this would toggle the audio track
                const isAudioOn = audioToggle.innerHTML.includes('microphone');
                if (isAudioOn) {
                    audioToggle.innerHTML = '<i class="fas fa-microphone-slash"></i> Audio';
                    addMessage('System', 'You muted your microphone');
                } else {
                    audioToggle.innerHTML = '<i class="fas fa-microphone"></i> Audio';
                    addMessage('System', 'You unmuted your microphone');
                }
            });
            
            screenShareBtn.addEventListener('click', function() {
                // In a real implementation, this would toggle screen sharing
                const isSharing = screenShareBtn.innerHTML.includes('fa-desktop');
                if (isSharing) {
                    screenShareBtn.innerHTML = '<i class="fas fa-times"></i> Stop Sharing';
                    screenShareBtn.style.background = 'linear-gradient(45deg, #ff416c, #ff4b2b)';
                    addMessage('System', 'You started sharing your screen');
                } else {
                    screenShareBtn.innerHTML = '<i class="fas fa-desktop"></i> Share Screen';
                    screenShareBtn.style.background = '';
                    addMessage('System', 'You stopped sharing your screen');
                }
            });
            
            sendMessageBtn.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            function sendMessage() {
                const message = messageInput.value.trim();
                if (message) {
                    addMessage('You', message);
                    messageInput.value = '';
                    
                    // Simulate responses after a short delay
                    setTimeout(() => {
                        addMessage('Alex Rodriguez', 'Thanks for the update!');
                    }, 1000);
                    
                    setTimeout(() => {
                        addMessage('Maya Patel', 'I agree with that point.');
                    }, 2000);
                }
            }
            
            function addMessage(sender, text) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message');
                
                const senderElement = document.createElement('div');
                senderElement.classList.add('message-sender');
                
                // Add appropriate icon based on sender
                if (sender === 'System') {
                    senderElement.innerHTML = '<i class="fas fa-shield-alt"></i> ' + sender;
                } else if (sender === 'You') {
                    senderElement.innerHTML = '<i class="fas fa-user"></i> ' + sender;
                } else {
                    senderElement.innerHTML = '<i class="fas fa-user"></i> ' + sender;
                }
                
                const textElement = document.createElement('div');
                textElement.classList.add('message-text');
                textElement.textContent = text;
                
                messageElement.appendChild(senderElement);
                messageElement.appendChild(textElement);
                
                chatMessages.appendChild(messageElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            // Simulation functions for demo purposes
            function simulateUserMedia() {
                // In a real implementation, this would use navigator.mediaDevices.getUserMedia
                const stream = null; // For demo, we're not actually capturing media
                localVideo.srcObject = stream;
                
                // Simulate video being available
                localVideo.src = "https://placehold.co/600x400/16213e/e94560?text=Your+Video+Feed";
            }
            
            function simulateRemoteVideo(videoElement, name) {
                // In a real implementation, this would be the remote stream
                videoElement.src = `https://placehold.co/600x400/0f3460/e94560?text=${encodeURIComponent(name)}`;
            }
        });
    </script>
</body>
</html>